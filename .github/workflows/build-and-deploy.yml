# This workflow will build a MuleSoft project and deploy to CloudHub
name: Build and Deploy Mule Application

on:
  pull_request:
    types: [ closed ]
    branches: [ main, qa, dev ]
  workflow_dispatch:
    
jobs:
  prepare:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
        environment: ${{ steps.set_vars.outputs.environment }}
        appNameSuffix: ${{ steps.set_vars.outputs.appNameSuffix }}
        clientIdSecretName: ${{ steps.set_vars.outputs.clientIdSecretName }}
        clientSecretName: ${{ steps.set_vars.outputs.clientSecretName }}
        
    steps:
    - name: Extract branch name
      id: extract_branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      
    - name: Print branch name
      run: echo "Branch ${{ steps.extract_branch.outputs.branch }}"
    
    - name: Set variables
      id: set_vars
      run: |
        environment=$(echo "${{ steps.extract_branch.outputs.branch }}" | tr '[:lower:]' '[:upper:]')
        echo "::set-output name=environment::$environment"
        if [[ "${{ steps.extract_branch.outputs.branch }}" != "main" ]]; then
          echo "##[set-output name=appNameSuffix;]$(echo "-${{ steps.extract_branch.outputs.branch }}" | tr '[:upper:]' '[:lower:]')"
        fi
        echo "::set-output name=clientIdSecretName::  CONN_ENV_${environment}_CLIENT_ID"
        echo "::set-output name=clientSecretName::  CONN_ENV_${environment}_CLIENT_SECRET"
        
    - name: Print variables
      run: |
        echo "Environment ${{ steps.set_vars.outputs.environment }}"
        echo "Suffix ${{ steps.set_vars.outputs.appNameSuffix }}"
        echo "Cient ID Name ${{ steps.set_vars.outputs.clientIdSecretName }}"
        echo "Cient Secret Name ${{ steps.set_vars.outputs.clientSecretName }}"
      
  build:
    runs-on: ubuntu-latest
    needs: prepare
    environment:
        name: ${{ needs.prepare.outputs.environment }}
    env:
      CLIENT_ID_NAME: ${{ needs.prepare.outputs.clientIdSecretName }}
      CLIENT_SECRET_NAME: ${{ needs.prepare.outputs.clientSecretName }}
      
    steps:
    - name: Print vars
      run: |
        echo "Secret name: ${{ needs.prepare.outputs.clientIdSecretName }}"
        echo "Secret name: ${{ needs.prepare.outputs.clientSecretName }}"
        echo "Env: ${{ needs.prepare.outputs.environment }}"

    - name: Print Env Secret
      id: set_vars
      env:
        CLIENT_ID: ${{ secrets[env.CLIENT_ID_NAME] }}
        CLIENT_SECRET: ${{ secrets[env.CLIENT_ID_SECRET] }}
      run: |
        echo SECRET_CLIENT_ID: $CLIENT_ID
        echo SECRET_CLIENT_SECRET: $CLIENT_SECRET

  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    environment:
        name: ${{ needs.prepare.outputs.environment }}
    steps: 
    - name: Print vars
      run: |
        echo ${{ secrets.CLIENT_ID }}
        echo ${{ needs.build.outputs.client_id }}
  
