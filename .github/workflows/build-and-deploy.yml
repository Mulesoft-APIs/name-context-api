# This workflow will build a MuleSoft project and deploy to CloudHub
name: Build and Deploy Mule Application

on:
  pull_request:
    types: [ closed ]
    branches: [ main, qa, dev ]
  workflow_dispatch:
    
jobs:
  prepare:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
        environment: ${{ steps.set_vars.outputs.environment }}
        environmentName: ${{ steps.set_vars.outputs.environmentName }}
        appNameSuffix: ${{ steps.set_vars.outputs.appNameSuffix }}
        clientIdSecretName: ${{ steps.set_vars.outputs.clientIdSecretName }}
        clientSecretName: ${{ steps.set_vars.outputs.clientSecretName }}
        
    steps:
    - name: Extract branch name
      id: extract_branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      
    - name: Print branch name
      run: echo "Branch ${{ steps.extract_branch.outputs.branch }}"
    
    - name: Set variables
      id: set_vars
      run: |
        environment=${{ steps.extract_branch.outputs.branch }}
        environmentName=$(if [[ $environment == "main" ]]; then echo 'prd'; else echo $environment; fi | tr '[:lower:]' '[:upper:]')
        echo "::set-output name=environmentName::$environmentName"
        echo "::set-output name=environment::$environment"
        if [[ $environment != "main" ]]; then
          echo "##[set-output name=appNameSuffix;]$(echo "-${{ steps.extract_branch.outputs.branch }}" | tr '[:upper:]' '[:lower:]')"
        fi
        echo "::set-output name=clientIdSecretName::CONN_ENV_${environmentName}_CLIENT_ID"
        echo "::set-output name=clientSecretName::CONN_ENV_${environmentName}_CLIENT_SECRET"
    
    - name: Print variables
      run: |
        echo "Environment ${{ steps.set_vars.outputs.environment }}"
        echo "Suffix ${{ steps.set_vars.outputs.appNameSuffix }}"
        echo "Cient ID Name ${{ steps.set_vars.outputs.clientIdSecretName }}"
        echo "Cient Secret Name ${{ steps.set_vars.outputs.clientSecretName }}"
        
  setup:
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'
        cache: maven
        
    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        repositories: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "url": "https://maven.anypoint.mulesoft.com/api/v3/organizations/${{ env.ORG_ID }}/maven"
          },{
            "id": "releases-ee", 
            "url": "https://repository.mulesoft.org/nexus/content/repositories/releases-ee/"
          }]
        servers: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "username": "~~~Client~~~", 
            "password": "${{ secrets.CONN_APP_CLIENT_ID }}~?~${{ secrets.CONN_APP_CLIENT_SECRET }}" 
          },{
            "id": "releases-ee", 
            "username": "qwqweqwe", 
            "password": "wqeeqeqe" 
          }] 
      
    - name: Print setup
      run: |
        echo "Java\n"
        java -version
        echo "Maven\n"
        mvn -v
        cat .m2/settings.xml
        
  setup-2:
    needs: setup
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Print setup
      run: |
        echo "Java\n"
        java -version
        echo "Maven\n"
        mvn -v
        cat .m2/settings.xml  
