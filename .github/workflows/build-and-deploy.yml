# This workflow will build a MuleSoft project and deploy to CloudHub
name: Build and Deploy Mule Application

on:
  pull_request:
    types: [ closed ]
    branches: [ main, qa, dev ]
  workflow_dispatch:

env:
  ORG_ID: c829b434-ae67-4663-bec9-999283bc3008
 
jobs:
  prepare:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_vars.outputs.environment }}
      environmentName: ${{ steps.set_vars.outputs.environmentName }}
      appNameSuffix: ${{ steps.set_vars.outputs.appNameSuffix }}
      clientIdSecretName: ${{ steps.set_vars.outputs.clientIdSecretName }}
      clientSecretName: ${{ steps.set_vars.outputs.clientSecretName }}
      secretKeyName: ${{ steps.set_vars.outputs.secretKeyName }}
    steps:
    - name: Extract branch name
      id: extract_branch
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
    - name: Print branch name
      run: echo "Branch ${{ steps.extract_branch.outputs.branch }}"
    
    - name: Set variables
      id: set_vars
      run: |
        branchName=${{ steps.extract_branch.outputs.branch }}
        environment=$(if [[ $branchName == "main" ]]; then echo 'prd'; else echo $branchName; fi)
        environmentName=$(echo $environment | tr '[:lower:]' '[:upper:]')
        echo "environmentName=$environmentName" >> $GITHUB_OUTPUT
        echo "environment=$environment" >> $GITHUB_OUTPUT
        if [[ $environment != "prd" ]]; then
          echo "appNameSuffix=$(echo "-${{ steps.extract_branch.outputs.branch }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        fi
        echo "clientIdSecretName=CONN_ENV_${environmentName}_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "clientSecretName=CONN_ENV_${environmentName}_CLIENT_SECRET" >> $GITHUB_OUTPUT
        echo "secretKeyName=SECURE_${environmentName}_KEY" >> $GITHUB_OUTPUT
    - name: Print variables
      run: |
        echo "Env ${{ steps.set_vars.outputs.environment }}"
        echo "Suffix ${{ steps.set_vars.outputs.appNameSuffix }}"
        echo "Cient ID Name ${{ steps.set_vars.outputs.clientIdSecretName }}"
        echo "Cient Secret Name ${{ steps.set_vars.outputs.clientSecretName }}"
        echo "Secret Key Name ${{ steps.set_vars.outputs.secretKeyName }}"
  
  test:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      SECRET_KEY_NAME: ${{ needs.prepare.outputs.secretKeyName }}
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'
        cache: maven
    
    - name: Set up Maven Settings
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        repositories: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "url": "https://maven.anypoint.mulesoft.com/api/v3/organizations/${{ env.ORG_ID }}/maven"
          },{
            "id": "releases-ee", 
            "url": "https://repository.mulesoft.org/nexus/content/repositories/releases-ee/"
          }]
        servers: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "username": "~~~Client~~~", 
            "password": "${{ secrets.CONN_APP_CLIENT_ID }}~?~${{ secrets.CONN_APP_CLIENT_SECRET }}" 
          },{
            "id": "releases-ee", 
            "username": "${{ secrets.MULE_EE_USER }}", 
            "password": "${{ secrets.MULE_EE_PASSWORD }}" 
          }]
    
    - name: Run MUnit Tests
      env:
        SECURE_KEY: ${{ secrets[env.SECRET_KEY_NAME] }}
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
        RUN_COVERAGE: ${{ secrets.RUN_COVERAGE }}
        FAIL_BUILD: ${{ secrets.FAIL_BUILD }}
        COVERAGE_APP: ${{ secrets.COVERAGE_APP }}
        COVERAGE_RESOURCE: ${{ secrets.COVERAGE_RESOURCE }}
        COVERAGE_FLOW: ${{ secrets.COVERAGE_FLOW }}
      run: |
        mvn -B clean test \
         -D"secure.key"="$SECURE_KEY" \
         -Denv="$ENVIRONMENT" \
         -DrunCoverage="$RUN_COVERAGE" \
         -DfailBuild=$FAIL_BUILD \
         -DcoverageApp="$COVERAGE_APP" \
         -DcoverageResource="$COVERAGE_RESOURCE" \
         -DcoverageFlow="$COVERAGE_FLOW"
  build:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up Maven Settings
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        repositories: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "url": "https://maven.anypoint.mulesoft.com/api/v3/organizations/${{ env.ORG_ID }}/maven"
          }]
        servers: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "username": "~~~Client~~~", 
            "password": "${{ secrets.CONN_APP_CLIENT_ID }}~?~${{ secrets.CONN_APP_CLIENT_SECRET }}" 
          }]
    
    - name: Build Package
      run: mvn -B clean package -DskipTests
    
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
        
  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    environment:
      name: ${{ needs.prepare.outputs.environment }}
    env:
      CLIENT_ID_NAME: ${{ needs.prepare.outputs.clientIdSecretName }}
      CLIENT_SECRET_NAME: ${{ needs.prepare.outputs.clientSecretName }}
      SECRET_KEY_NAME: ${{ needs.prepare.outputs.secretKeyName }}
    steps: 
    - uses: actions/checkout@v3
    
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        repositories: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "url": "https://maven.anypoint.mulesoft.com/api/v3/organizations/${{ env.ORG_ID }}/maven"
          }]
        servers: |
          [{ 
            "id": "my-organization-exchange-repository", 
            "username": "~~~Client~~~", 
            "password": "${{ secrets.CONN_APP_CLIENT_ID }}~?~${{ secrets.CONN_APP_CLIENT_SECRET }}" 
          }]
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Deploy to CloudHub Environment
      env:
        ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
        ENVIRONMENT_NAME: ${{ needs.prepare.outputs.environmentName }}
        APP_NAME_SUFFIX: ${{ needs.prepare.outputs.appNameSuffix }}
        CONN_APP_CLIENT_ID: ${{ secrets.CONN_APP_CLIENT_ID }}
        CONN_APP_CLIENT_SECRET: ${{ secrets.CONN_APP_CLIENT_SECRET }}
        ENV_CLIENT_ID: ${{ secrets[env.CLIENT_ID_NAME] }}
        ENV_CLIENT_SECRET: ${{ secrets[env.CLIENT_SECRET_NAME] }}
        SECURE_KEY: ${{ secrets[env.SECRET_KEY_NAME] }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy -DskipTests \
         -Dmule.artifact=$artifactName \
         -Denv.environment="$ENVIRONMENT" \
         -Denv.environmentName="$ENVIRONMENT_NAME" \
         -Denv.appNameSuffix="$APP_NAME_SUFFIX" \
         -Denv.connAppClientID="$CONN_APP_CLIENT_ID" \
         -Denv.connAppClientSecret="$CONN_APP_CLIENT_SECRET"\
         -Denv.envClientId="$ENV_CLIENT_ID" \
         -Denv.envClientSecret="$ENV_CLIENT_SECRET" \
         -Denv.secureKey="$SECURE_KEY"